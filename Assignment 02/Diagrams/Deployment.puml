@startuml

skinparam component {
    BackgroundColor<<server>> LightSkyBlue
    BackgroundColor<<db>> LightGreen
    BackgroundColor<<service>> LightGoldenrodYellow
    BackgroundColor<<client>> Lavender
    BackgroundColor<<external>> Moccasin
}

' External Actors
actor "Attendee" as Attendee
actor "Admin" as Admin
actor "Event Organizer" as Organizer

' Client Devices
node "Client Devices" <<client>> {
    component "Web Frontend" as WebBrowser
    component "Mobile Frontend" as MobileApp
}

' Load Balancer
node "Load Balancer" <<server>> {
    component "AWS Elastic Load Balancer" as ELB
}

' Application Servers
node "Application Server Cluster" <<server>> {
    component "Web Backend (Node.js with Express)" as WebBackend
    component "Mobile Backend (Node.js with Express)" as MobileBackend
    node "Microservices Server" <<server>> {
        component "Authentication Service" as AuthService
        component "Event Service" as EventService
        component "Seat Management Service" as SeatService
        component "Payment Service" as PaymentService
        component "Notification Service" as NotificationService
    }
}

' Caching Layer
node "Caching Layer" <<server>> {
    component "Redis Cache" as Redis
}

' Asynchronous Processing
node "Asynchronous Processing" <<server>> {
    component "Task Queue (AWS SQS)" as TaskQueue
    component "Message Queue (RabbitMQ)" as RabbitMQ
}

' Databases
node "Database Cluster" <<db>> {
    database "Relational DB (MySQL with Read Replicas)" as RelationalDB <<db>>
    database "NoSQL DB (MongoDB with Sharding)" as NoSQLDB <<db>>
}

' External Services
node "External Services" <<external>> {
    component "Payment Gateway" as PaymentGateway
    component "Email/SMS Service" as EmailService
}

' Cloud Platform
cloud "Cloud Infrastructure (AWS, GCP, Azure)" as Cloud {
    RelationalDB -down-> NoSQLDB : "Auto-scaling & Sharding"
    ELB -down-> WebBackend : "Horizontal Scaling"
    ELB -down-> MobileBackend : "Horizontal Scaling"
}

' Relationships
Attendee --> WebBrowser : "Access Website"
Attendee --> MobileApp : "Use Mobile App"
Admin --> WebBrowser : "Manage Events/Users"
Organizer --> WebBrowser : "Create Events"

WebBrowser --> ELB : "API Requests"
MobileApp --> ELB : "API Requests"

ELB --> WebBackend : "Route to Web Backend"
ELB --> MobileBackend : "Route to Mobile Backend"

WebBackend --> Redis : "Fetch Cached Data"
WebBackend --> AuthService : "Authenticate User"
WebBackend --> EventService : "Manage Events"
WebBackend --> SeatService : "Manage Seat Operations"
WebBackend --> PaymentService : "Initiate Payment"
WebBackend --> NotificationService : "Trigger Notifications"

MobileBackend --> Redis : "Fetch Cached Data"
MobileBackend --> AuthService : "Authenticate User"
MobileBackend --> EventService : "Manage Events"
MobileBackend --> SeatService : "Manage Seat Operations"
MobileBackend --> PaymentService : "Initiate Payment"
MobileBackend --> NotificationService : "Trigger Notifications"

AuthService --> RelationalDB : "User Data Queries"
EventService --> RelationalDB : "Event Data Queries"
SeatService --> RelationalDB : "Booking Data Queries"
PaymentService --> PaymentGateway : "Process Payments"
NotificationService --> EmailService : "Send Notifications"

TaskQueue --> NotificationService : "Background Notifications"
TaskQueue --> PaymentService : "Process Payments Asynchronously"
TaskQueue --> SeatService : "Background Seat Updates"

RabbitMQ --> NotificationService : "Queue Notifications"

@enduml
